name: 'Docker Push to Github'
description: 'Build and push an image to ghcr'
inputs:
  github_token:
    required: true
  dockerhub_user:
    required: true
  dockerhub_password:
    required: true
  image:
    required: true
  context:
    required: false
  build_args:
    required: false
  dockerfile:
    required: false
  version:
    required: false
  allow_vulnerabilities:
    required: false
    default: false
  slack_webhook_url:
    require: true

outputs:
  version:
    description: "Image Version"
    value: ${{ steps.image.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: Tag Docker Image
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ inputs.image }}
        flavor: latest=true
        tags: |
          type=raw,value=${{ inputs.version }},enable=${{ (inputs.version && 'true') || 'false' }}
          type=ref,event=branch,enable=${{ (inputs.version && 'false') || 'true' }}
          type=ref,event=pr,enable=${{ (inputs.version && 'false') || 'true' }}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    - name: Get Image
      id: image
      shell: bash
      run: echo "version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}" >> $GITHUB_OUTPUT
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.github_token }}
    - name: Build and push to GitHub Container Registry
      uses: docker/build-push-action@v4
      with:
        push: true
        context: ${{ inputs.context }}
        build-args: ${{ inputs.build-args }}
        file: ${{ inputs.dockerfile }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: Check CVEs
      id: cves
      continue-on-error: ${{ inputs.allow_vulnerabilities == 'true' }}
      uses: enosix/github-action-docker-scout@v1.1
      with:
        image: ${{ inputs.image }}:${{ steps.image.outputs.version }}
        # Authenticate with Docker Hub
        user: ${{ inputs.dockerhub_user }}
        password: ${{ inputs.dockerhub_password }}
        # Optional registry authentication when pulling private images
        registry_user: ${{ github.actor }}
        registry_password: ${{ inputs.github_token }}
    - name: Log vulnerability errors
      if: inputs.allow_vulnerabilities == 'true' && steps.cves.outcome == 'failure'
      shell: bash
      run: |
        echo "${{ steps.cves.outputs.summary }}" >> $GITHUB_STEP_SUMMARY
        echo "Vulnerabilites detected, please check the logs" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.cves.outputs.results }}"
    - name: Send notification to slack
      if: steps.cves.outcome == 'failure'
      uses: slackapi/slack-github-action@v1.24.0
      with:
        # This data can be any valid JSON from a previous step in the GitHub Action
        payload: |
          {
            "channel": "platform-automated",
            "username": "Github Actions",
            "icon_url": "https://avatars.githubusercontent.com/u/9919?s=200&v=4",
            "attachments": {
              "fallback": "${{ github.repository }} ${{ github.ref_name }} Failed the CVE check - please view the job for details.",
              "color": "danger",
              "fields": {
                "title": "${{ github.repository }} ${{ github.ref_name }} has vulnerabilities",
                "title_link": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "value": ${{ toJson(steps.cves.outputs.summary) }}
              }
            }
          }
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook_url }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
